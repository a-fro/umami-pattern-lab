/////////////////////
// General Mixins (put specific ones in component files where applicable)

/// Mixin - Clearfix.
/// Adds clearfix based on http://bourbon.io/docs/#clearfix
/// use example =   @include cleafix

@mixin clearfix {
  &::after {
    clear: both;
    content: "";
    display: table;
  }
}

/// Mixin - Wrapper
/// Outer container mixin for large screens
@mixin wrapper($container-max-width: $max-width, $outer-container-break: $small, $v-margin: 0, $v-padding: 0, $h-padding: $space, $h-padding-large: $space) {
  max-width: #{$container-max-width};
  width: auto;
  margin: #{$v-margin} auto;
  padding: #{$v-padding} #{$h-padding};

  @include breakpoint($outer-container-break) {
    padding: #{$v-padding} #{$h-padding-large};
  }

  @include breakpoint($container-max-width) {
    padding-left: calc(#{$h-padding-large} + calc(-50vw + calc(#{$container-max-width} / 2)));
    padding-right: calc(#{$h-padding-large} + calc(-50vw + calc(#{$container-max-width} / 2)));
  }
}

/// Use the breakout mixin for elements that should be edge-to-edge
/// Even when a parent container uses the wrapper mixin
@mixin breakout($v-padding: $space-double, $undo: false) {
  @if $undo {
    margin: 0;
    padding: 0;
  }
  @else {
    margin-left: calc(-50vw + 50%);
    margin-right: calc(-50vw + 50%);
    padding-left: calc(#{$v-padding} + calc(-50vw + 50%));
    padding-right: calc(#{$v-padding} + calc(-50vw + 50%));
  }
}

/// Mixin - Standard Margin
@mixin margin {
  margin-bottom: 1em;
}

@mixin no-bottom {
  margin-bottom: 0;
}

// Full Width
// Pulls in `./node_modules/sass-tools/lib/_full-width.scss`
// Use `@include full-width()` to have any element break outside of a constraining container and span the full browser width
@import "full-width";

.full-width {
  @include full-width;
}

@import "center";

.centered {
  @include center;
}

@mixin two-column-grid($gap: 28px, $responsive: true, $breakpoint: $medium) {
  display: grid;
  grid-gap: $gap;

  @if $responsive {
    @include breakpoint($breakpoint) {
      grid-template-columns: repeat(2, 1fr);
    }
  }
  @else {
    grid-template-columns: repeat(2, 1fr);
  }

  > h2,
  > .more-link,
  hr {
    grid-column: 1 / -1;
    margin-bottom: 0;
  }
}

@mixin three-column-grid($gap: 28px, $responsive: true) {
  display: grid;
  grid-gap: $gap;

  @if $responsive {
    @include medium {
      grid-template-columns: repeat(2, 1fr);
    }

    @include large {
      grid-template-columns: repeat(3, 1fr);
    }
  }
  @else {
    grid-template-columns: repeat(3, 1fr);
  }

  > h2,
  > .more-link {
    grid-column: 1 / -1;
    margin-bottom: 0;
  }
}

@mixin three-column-flex($element, $min, $max) {
  display: flex;
  flex-wrap: wrap;

  #{$element} {
    min-width: $min;
    max-width: $max;
    flex-basis: auto; /* default value */
    flex-grow: 1;
    margin-right: 1rem;
  }
}

@mixin four-column-grid($gap: 28px, $responsive: true) {
  display: grid;
  grid-gap: $gap;

  @if $responsive {
    @include small {
      grid-template-columns: repeat(2, 1fr);
    }

    @include large {
      grid-template-columns: repeat(4, 1fr);
    }
  }
  @else {
    grid-template-columns: repeat(4, 1fr);
  }

  > h2,
  > .more-link {
    grid-column: 1 / -1;
    margin-bottom: 0;
  }
}

@mixin one-by-two-grid($gap: 28px, $responsive: true) {
  display: grid;
  grid-gap: $gap;

  @if $responsive {
    @include small {
      grid-template-columns: repeat(2, 1fr);

      :first-child {
        grid-column: 1 / -1;
      }
    }

    @include large {
      grid-template-columns: 2fr 1fr 1fr;

      :first-child {
        grid-column: 1;
      }
    }
  }
  @else {
    grid-template-columns: 2fr 1fr 1fr;
  }

  > h2 {
    grid-column: 1 / -1;
    margin-bottom: 0;
  }
}

@mixin span-grid {
  grid-column: 1 / -1;
}

/**
 * Hide elements visually, but keep them available for screen readers.
 *
 * Used for information required for screen reader users to understand and use
 * the site where visual display is undesirable. Information provided in this
 * manner should be kept concise, to avoid unnecessary burden on the user.
 * "!important" is used to prevent unintentional overrides.
 */
@mixin visually-hidden {
  position: absolute !important;
  clip: rect(1px, 1px, 1px, 1px);
  overflow: hidden;
  height: 1px;
  width: 1px;
  word-wrap: normal;

  /**
   * The .focusable class extends the .visually-hidden class to allow
   * the element to be focusable when navigated to via the keyboard.
   */
  &.focusable {
    &:active,
    &:focus {
      position: static !important;
      clip: auto;
      overflow: visible;
      height: auto;
      width: auto;
    }
  }
}
